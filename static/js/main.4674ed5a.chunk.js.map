{"version":3,"sources":["components/Comments.jsx","components/Post.jsx","components/App.js","reportWebVitals.js","index.js"],"names":["Comments","className","src","Faker","internet","avatar","alt","userName","lorem","words","Math","floor","random","datatype","boolean","icon","faHeart","style","color","faHeartSolid","Post","props","username","faEllipsisV","image","description","submited","comments","map","comment","isLike","commentValue","key","App","getRandomTime","number","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAce,SAASA,IACtB,OACE,qBAAKC,UAAU,gBAAf,SACE,sBAAKA,UAAU,UAAf,UACE,qBAAKA,UAAU,uBAAf,SACE,qBAAKC,IAAKC,IAAMC,SAASC,SAAUC,IAAI,2BAEzC,sBAAKL,UAAU,kBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,sBAAMA,UAAU,wBAAhB,SACGE,IAAMC,SAASG,aAEjBJ,IAAMK,MAAMC,WAEf,sBAAKR,UAAU,iBAAf,UACE,+BArBAS,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAAK,MAsBtC,+CAGJ,qBAAKX,UAAU,eAAf,SAtBKE,IAAMU,SAASC,UAAY,cAAC,IAAD,CAAiBC,KAAMC,IAASf,UAAU,WAAc,cAAC,IAAD,CAAiBgB,MAAO,CAACC,MAAO,OAAQH,KAAMI,IAAclB,UAAU,kBCDvJ,SAASmB,EAAKC,GACzB,OACI,sBAAKpB,UAAU,aAAf,UACA,sBAAKA,UAAU,cAAf,UACI,qBAAKA,UAAU,4BAAf,SACI,qBAAKC,IAAKmB,EAAMhB,OAAQC,IAAI,yBAEhC,qBAAKL,UAAU,uBAAf,SACKoB,EAAMC,WAEX,qBAAKrB,UAAU,uBAAf,SACI,cAAC,IAAD,CAAiBc,KAAMQ,IAAatB,UAAU,gBAGtD,qBAAKA,UAAU,aAAf,SACI,qBAAKC,IAAKmB,EAAMG,MAAOlB,IAAI,iBAE/B,sBAAKL,UAAU,eAAf,UACI,sBAAMA,UAAU,wBAAhB,SAAyCoB,EAAMC,WAC9CD,EAAMI,YACP,qBAAKxB,UAAU,oBAAf,SACKoB,EAAMK,cAIXL,EAAMM,SAASC,KAAI,SAAAC,GACf,OAAO,cAAC7B,EAAD,CACKsB,SAAUO,EAAQP,SAClBjB,OAAQwB,EAAQxB,OAChBqB,SAAUG,EAAQH,SAClBI,OAAQD,EAAQC,OAChBC,aAAcF,EAAQE,cACjBF,EAAQG,W,QCjCzC,IA8BeC,EA9BH,SAACZ,GACT,OACI,qBAAKpB,UAAU,MAAf,SACI,cAACmB,EAAD,CACIf,OAAQF,IAAMC,SAASC,SACvBiB,SAAUnB,IAAMC,SAASG,WACzBiB,MAAOrB,IAAMqB,MAAMA,QACnBC,YAAatB,IAAMK,MAAMC,MAAM,IAC/BiB,SAXJhB,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAWnBsB,QACVP,SAAU,CACF,CACIL,SAAUnB,IAAMC,SAASG,WACzBF,OAAQF,IAAMC,SAASC,SACvBqB,SAAUvB,IAAMU,SAASsB,SACzBJ,aAAc5B,IAAMK,MAAMC,MAAM,GAChCqB,OAAQ3B,IAAMU,SAASC,WAE3B,CACIQ,SAAUnB,IAAMC,SAASG,WACzBF,OAAQF,IAAMC,SAASC,SACvBqB,SAAUvB,IAAMU,SAASsB,SACzBJ,aAAc5B,IAAMK,MAAMC,MAAM,GAChCqB,OAAQ3B,IAAMU,SAASC,iBCnBpCsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.4674ed5a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Faker from \"faker\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHeart } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faHeart as faHeartSolid } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nfunction getRandomTime() {\r\n    return (Math.floor(Math.random() * 10) + 1) + \"h\" ;\r\n}\r\nfunction getRandomLike() {\r\n    return ( Faker.datatype.boolean() ? <FontAwesomeIcon icon={faHeart} className=\"poinet\" /> : <FontAwesomeIcon style={{color: 'red'}} icon={faHeartSolid} className=\"poinet\" /> )\r\n}\r\n\r\nexport default function Comments() {\r\n  return (\r\n    <div className=\"Post-comments\">\r\n      <div className=\"Comment\">\r\n        <div className=\"Comment-user-profile\">\r\n          <img src={Faker.internet.avatar()} alt=\"User Comment Profile\" />\r\n        </div>\r\n        <div className=\"Comment-comment\">\r\n          <div className=\"Comment-text\">\r\n            <span className=\"Post-caption-username\">\r\n              {Faker.internet.userName()}\r\n            </span>\r\n            {Faker.lorem.words()}\r\n          </div>\r\n          <div className=\"Comment-detail\">\r\n            <span>{getRandomTime()}</span>\r\n            <span>Reply</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"Comment-like\">{getRandomLike()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Faker from \"faker\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEllipsisV } from '@fortawesome/free-solid-svg-icons';\r\nimport { faHeart } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faHeart as faHeartSolid } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Comments from \"./Comments\";\r\n\r\n\r\n\r\nexport default function Post(props) {\r\n    return (\r\n        <div className=\"Post col-4\">\r\n        <div className=\"Post-header\">\r\n            <div className=\"Post-header-profile-image\">\r\n                <img src={props.avatar} alt=\"Post Profile Image\"/>\r\n            </div>\r\n            <div className=\"Post-header-username\">\r\n                {props.username}\r\n            </div>\r\n            <div className=\"Post-header-more-btn\">\r\n                <FontAwesomeIcon icon={faEllipsisV} className=\"poinet\" />\r\n            </div>\r\n        </div>\r\n        <div className=\"Post-image\">\r\n            <img src={props.image} alt=\"Post Image\"/>\r\n        </div>\r\n        <div className=\"Post-caption\">\r\n            <span className=\"Post-caption-username\">{props.username}</span>\r\n            {props.description}\r\n            <div className=\"Post-caption-time\">\r\n                {props.submited}\r\n            </div>\r\n        </div>\r\n        {\r\n            props.comments.map(comment => {\r\n                return <Comments\r\n                            username={comment.username} \r\n                            avatar={comment.avatar} \r\n                            submited={comment.submited} \r\n                            isLike={comment.isLike} \r\n                            commentValue={comment.commentValue}\r\n                            key={comment.key}\r\n                        />\r\n            })\r\n        }\r\n    </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Post from './Post';\r\nimport Faker from \"faker\";\r\nimport './App.css';\r\n\r\nfunction getRandomTime() {\r\n    return (Math.floor(Math.random() * 10) + 1) + \"h\" ;\r\n}\r\n\r\nconst App = (props) => {\r\n    return (\r\n        <div className=\"row\">\r\n            <Post \r\n                avatar={Faker.internet.avatar()} \r\n                username={Faker.internet.userName()} \r\n                image={Faker.image.image()} \r\n                description={Faker.lorem.words(10)} \r\n                submited={getRandomTime() + \" ago\"}\r\n                comments={[\r\n                        {\r\n                            username: Faker.internet.userName(),\r\n                            avatar: Faker.internet.avatar(),\r\n                            submited: Faker.datatype.number(),\r\n                            commentValue: Faker.lorem.words(8),\r\n                            isLike: Faker.datatype.boolean(),\r\n                        },\r\n                        {\r\n                            username: Faker.internet.userName(),\r\n                            avatar: Faker.internet.avatar(),\r\n                            submited: Faker.datatype.number(),\r\n                            commentValue: Faker.lorem.words(8),\r\n                            isLike: Faker.datatype.boolean(),\r\n                        },\r\n                ]}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}